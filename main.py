# Assuming this is your main FastAPI file
import asyncio
import email
import hmac
import hashlib
import os
from urllib.parse import parse_qsl
from operator import itemgetter
import json
from datetime import datetime, timedelta, timezone

from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.methods import SetWebhook, DeleteWebhook # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤

from fastapi import FastAPI, Request, Response, HTTPException, Depends, Query # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Query –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ GET –∑–∞–ø—Ä–æ—Å–∞
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError

from dotenv import load_dotenv
from passlib.context import CryptContext

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ ORM-–º–æ–¥–µ–ª–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã –ë–î ---
from app.database import engine, create_db_tables, drop_db_tables, get_async_session
from app.models import User, UserAccountStatus, UserRole, Investment, Transaction, Referral # Ensure User is imported

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π ---
from app.routers import investments #

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ initData ---
from app.utils import check_webapp_signature

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É ---
from app import referrals

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ---
from app.transactions import router as transactions_router

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∏–≥—Ä ---
from app.routers import games

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL") # URL –≤–∞—à–µ–≥–æ Mini App
BASE_WEBHOOK_URL = os.getenv("BASE_WEBHOOK_URL")
DROP_DB_ON_STARTUP = os.getenv("DROP_DB_ON_STARTUP", "False").lower() == "true"

JWT_SECRET_KEY = os.getenv("JWT_SECRET_KEY")
REFRESH_TOKEN_SECRET_KEY = os.getenv("REFRESH_TOKEN_SECRET_KEY") 
ALGORITHM = "HS256"

# === –í–†–ï–ú–Ø –ñ–ò–ó–ù–ò –¢–û–ö–ï–ù–û–í ===
ACCESS_TOKEN_EXPIRE_MINUTES = 120 # –ù–∞–ø—Ä–∏–º–µ—Ä, 30 –º–∏–Ω—É—Ç
REFRESH_TOKEN_EXPIRE_DAYS = 14   # –ù–∞–ø—Ä–∏–º–µ—Ä, 7 –¥–Ω–µ–π –¥–ª—è "Remember Me"

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π ===
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")



# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI ===
app = FastAPI()

# CORS –¥–ª—è Mini App
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://lucrora.vercel.app", "https://lucrora-bot.onrender.com", "http://localhost:8000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø JWT (–û–ë–ù–û–í–õ–ï–ù–û) ===

def create_access_token(data: dict):
    to_encode = data.copy()
    expire = datetime.now(timezone.utc) + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, JWT_SECRET_KEY, algorithm=ALGORITHM) # –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT_SECRET_KEY
    return encoded_jwt

def create_refresh_token(data: dict):
    to_encode = data.copy()
    expire = datetime.now(timezone.utc) + timedelta(days=REFRESH_TOKEN_EXPIRE_DAYS)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, REFRESH_TOKEN_SECRET_KEY, algorithm=ALGORITHM) # –ò—Å–ø–æ–ª—å–∑—É–µ–º REFRESH_TOKEN_SECRET_KEY
    return encoded_jwt

def verify_access_token(token: str):
    try:
        payload = jwt.decode(token, JWT_SECRET_KEY, algorithms=[ALGORITHM])
        user_id: str = payload.get("sub")
        if user_id is None:
            raise HTTPException(status_code=401, detail="Invalid Access Token: User ID missing")
        return int(user_id)
    except JWTError:
        raise HTTPException(status_code=401, detail="Invalid Access Token: Signature or expiration invalid")

def verify_refresh_token(token: str):
    try:
        payload = jwt.decode(token, REFRESH_TOKEN_SECRET_KEY, algorithms=[ALGORITHM])
        user_id: str = payload.get("sub")
        if user_id is None:
            raise HTTPException(status_code=401, detail="Invalid Refresh Token: User ID missing")
        return int(user_id)
    except JWTError:
        raise HTTPException(status_code=401, detail="Invalid Refresh Token: Signature or expiration invalid")

# --- –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization ---
security = HTTPBearer()


# ================================================
# ================================================

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞ ===
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === –ö–Ω–æ–ø–∫–∞ Mini App ===
webapp_button = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Mini App", web_app=WebAppInfo(url=WEBAPP_URL))]
])

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ===
@dp.message(Command("start"))
async def start_handler(message: Message):

    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id} - start")

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Mini App:",
        reply_markup=webapp_button
    )
    await message.delete() # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# ================================================
# ================================================

# === –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø / –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø / –°–ï–°–°–ò–ò ===

@app.post("/api/register")
async def api_register(request: Request, db: AsyncSession = Depends(get_async_session)):
    try:
        data = await request.json()
        init_data = data.get("initData")
        username = data.get("username")
        password = data.get("password")
        remember_me = data.get("rememberMe", False) # –ù–û–í–û–ï: —Ñ–ª–∞–≥ "Remember Me"
        phone_number = data.get("phone_number") 
        email = data.get("email")               

        if not init_data or not username or not password:
            raise HTTPException(status_code=400, detail="Missing required data.")

        if not check_webapp_signature(init_data, BOT_TOKEN):
            raise HTTPException(status_code=403, detail="Invalid Telegram initData signature.")

        user_data_tg_str = dict(parse_qsl(init_data)).get('user')
        if not user_data_tg_str:
            raise HTTPException(status_code=400, detail="Telegram user data not found in initData")

        user_info_tg = json.loads(user_data_tg_str)
        telegram_id = int(user_info_tg.get('id'))
        first_name = user_info_tg.get('first_name')
        last_name = user_info_tg.get('last_name')

        existing_user = await db.execute(select(User).filter_by(id=telegram_id))
        if existing_user.scalar_one_or_none():
            raise HTTPException(status_code=409, detail="User already registered.")

        # –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        hashed_password = pwd_context.hash(password)

        new_user = User(
            id=telegram_id,
            username=username,
            first_name=first_name,
            last_name=last_name,
            password_hash=hashed_password,
            status=UserAccountStatus.active, # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã–π
            role=UserRole.user, # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            phone_number=phone_number,
            email=email
        )
        db.add(new_user)
        await db.commit()
        await db.refresh(new_user)

        # === –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–ë–û–ò–• –¢–û–ö–ï–ù–û–í ===
        access_token = create_access_token(data={"sub": str(new_user.id)})
        refresh_token = create_refresh_token(data={"sub": str(new_user.id)})

        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {telegram_id}) —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í—ã–¥–∞–Ω—ã —Ç–æ–∫–µ–Ω—ã.")

        return {
            "ok": True,
            "message": "Registration successful!",
            "user_id": str(telegram_id),
            "username": username,
            "access_token": access_token,
            "refresh_token": refresh_token, # –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Refresh Token
            "token_type": "bearer",
            "isRegistered": True,
            "main_balance": float(new_user.main_balance),
            "bonus_balance": float(new_user.bonus_balance),
            "lucrum_balance": float(new_user.lucrum_balance),
            "total_invested": float(new_user.total_invested),
            "total_withdrawn": float(new_user.total_withdrawn),
            "first_name": new_user.first_name,
            "last_name": new_user.last_name,
            "status": new_user.status.value,
            "role": new_user.role.value,
            "email": new_user.email,
            "phone_number": new_user.phone_number
        }
    except HTTPException as e:
        raise e
    except Exception as e:
        print(f"Error during registration: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {e}")

# ================================================

@app.post("/api/login")
async def api_login(request: Request, db: AsyncSession = Depends(get_async_session)):
    try:
        data = await request.json()
        init_data = data.get("initData")
        email = data.get("email")
        password = data.get("password")
        remember_me = data.get("rememberMe", False) # –ù–û–í–û–ï: —Ñ–ª–∞–≥ "Remember Me"

        if not init_data or not email or not password:
            raise HTTPException(status_code=400, detail="Missing required data.")

        if not check_webapp_signature(init_data, BOT_TOKEN):
            raise HTTPException(status_code=403, detail="Invalid Telegram initData signature.")

        user_data_tg_str = dict(parse_qsl(init_data)).get('user')
        if not user_data_tg_str:
            raise HTTPException(status_code=400, detail="Telegram user data not found in initData")

        user_info_tg = json.loads(user_data_tg_str)
        telegram_id_from_tg = int(user_info_tg.get('id'))

        user_query = await db.execute(select(User).filter_by(email=email))
        user = user_query.scalar_one_or_none()

        if not user or not pwd_context.verify(password, user.password_hash):
            raise HTTPException(status_code=401, detail="Invalid username or password.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Telegram ID –∏–∑ initData —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        if user.id != telegram_id_from_tg:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} (ID: {user.id}) –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏ —Å –¥—Ä—É–≥–∏–º Telegram ID ({telegram_id_from_tg}).")
            # –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –≤—Ö–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–µ–π—á–∞—Å –∑–∞–ø—Ä–µ—Ç–∏–º.
            raise HTTPException(status_code=403, detail="Telegram ID mismatch. Please login from the correct Telegram account.")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        user.last_login_date = datetime.now(timezone.utc)
        user.status = UserAccountStatus.active
        await db.commit()
        await db.refresh(user)

        # === –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–ë–û–ò–• –¢–û–ö–ï–ù–û–í ===
        access_token = create_access_token(data={"sub": str(user.id)})
        refresh_token = create_refresh_token(data={"sub": str(user.id)})

        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} (ID: {user.id}) —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É. –í—ã–¥–∞–Ω—ã —Ç–æ–∫–µ–Ω—ã.")

        return {
            "ok": True,
            "message": "Login successful!",
            "isRegistered": True,
            "access_token": access_token,
            "refresh_token": refresh_token, # –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Refresh Token
            "token_type": "bearer",
            "main_balance": float(user.main_balance),
            "bonus_balance": float(user.bonus_balance),
            "lucrum_balance": float(user.lucrum_balance),
            "total_invested": float(user.total_invested),
            "total_withdrawn": float(user.total_withdrawn),
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "registration_date": user.registration_date.isoformat() if user.registration_date else None,
            "status": user.status.value,
            "role": user.role.value
        }
    except HTTPException as e:
        raise e
    except Exception as e:
        print(f"Error during login: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {e}")


# ================================================

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Access Token —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Refresh Token
@app.post("/api/refresh-token")
async def refresh_access_token(
    request: Request,
    db: AsyncSession = Depends(get_async_session),
    credentials: HTTPAuthorizationCredentials = Depends(security) # –ó–¥–µ—Å—å –æ–∂–∏–¥–∞–µ–º Refresh Token –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç Access Token, –∏—Å–ø–æ–ª—å–∑—É—è Refresh Token.
    """
    print("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞.")
    try:
        refresh_token = credentials.credentials
        user_id_from_refresh = verify_refresh_token(refresh_token) # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º Refresh Token

        user = await db.get(User, user_id_from_refresh)
        if not user:
            raise HTTPException(status_code=404, detail="User not found.")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ Refresh Token –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω –≤ –ë–î, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã RefreshTokens)
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        if user.status == UserAccountStatus.banned:
            raise HTTPException(status_code=403, detail="Account is banned. Access denied.")
        if user.status == UserAccountStatus.logged_out:
            raise HTTPException(status_code=401, detail="Account was logged out from another session. Please re-login.")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π Access Token
        new_access_token = create_access_token(data={"sub": str(user.id)})
        print(f"Access Token –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id}).")

        return {
            "ok": True,
            "access_token": new_access_token,
            "token_type": "bearer",
            "message": "Access token refreshed."
        }
    except HTTPException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e.detail}")
        raise e
    except Exception as e:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error during token refresh: {e}")


# ================================================


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Mini App)
@app.post("/api/check-session")
async def check_user_session(
    request: Request,
    db: AsyncSession = Depends(get_async_session),
    credentials: HTTPAuthorizationCredentials = Depends(security) # –û–∂–∏–¥–∞–µ–º Access Token
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Access Token —Å–µ—Å—Å–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞.
    –¢–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç initData –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram ID, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å —Ç–æ–∫–µ–Ω–æ–º.
    """
    print("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Å—Å–∏–∏.")
    try:
        body = await request.json()
        init_data = body.get("initData")
    except Exception:
        raise HTTPException(status_code=400, detail="Bad Request: Invalid JSON")

    if not init_data:
        raise HTTPException(status_code=403, detail="Missing Telegram initData")

    if not check_webapp_signature(init_data, BOT_TOKEN):
        raise HTTPException(status_code=403, detail="Invalid Telegram initData signature.")

    user_data_tg_str = dict(parse_qsl(init_data)).get('user')
    if not user_data_tg_str:
        raise HTTPException(status_code=400, detail="Telegram user data not found in initData")

    try:
        user_info_tg = json.loads(user_data_tg_str)
        telegram_id_from_tg = int(user_info_tg.get('id'))
    except (json.JSONDecodeError, ValueError):
        raise HTTPException(status_code=400, detail="Invalid Telegram user data JSON or ID.")

    try:
        user_id_from_access = verify_access_token(credentials.credentials) # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º Access Token

        if user_id_from_access != telegram_id_from_tg:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ID –∏–∑ —Ç–æ–∫–µ–Ω–∞ ({user_id_from_access}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å ID –∏–∑ initData ({telegram_id_from_tg}).")
            raise HTTPException(status_code=403, detail="Access Token does not match Telegram user ID.")

        user = await db.get(User, user_id_from_access)
        if not user:
            raise HTTPException(status_code=404, detail="User not found.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        if user.status == UserAccountStatus.banned:
            raise HTTPException(status_code=403, detail="Account is banned. Access denied.")
        if user.status == UserAccountStatus.logged_out:
            # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å logged_out, –¥–∞–∂–µ –µ—Å–ª–∏ access token –≤–∞–ª–∏–¥–µ–Ω, –º—ã —Ö–æ—Ç–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å
            raise HTTPException(status_code=401, detail="Account was logged out from another session. Please re-login.")
        if user.status == UserAccountStatus.inactive:
            raise HTTPException(status_code=401, detail="Account is inactive. Please re-login.")


        print(f"–°–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: {user.status.value}, –†–æ–ª—å: {user.role.value}")
        return {
            "ok": True,
            "isLoggedIn": True,
            "message": "Session is valid.",
            "user_id": str(user.id),
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "main_balance": float(user.main_balance),
            "bonus_balance": float(user.bonus_balance),
            "lucrum_balance": float(user.lucrum_balance),
            "total_invested": float(user.total_invested),
            "total_withdrawn": float(user.total_withdrawn),
            "registration_date": user.registration_date.isoformat() if user.registration_date else None,
            "status": user.status.value,
            "role": user.role.value
        }
    except HTTPException as e:
        raise e
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {e}")


# ================================================


# –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
@app.post("/api/logout")
async def api_logout(
    db: AsyncSession = Depends(get_async_session),
    credentials: HTTPAuthorizationCredentials = Depends(security) # –û–∂–∏–¥–∞–µ–º Access Token
):
    """
    –í—ã—Ö–æ–¥–∏—Ç –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –ø–æ–º–µ—á–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ 'logged_out' –≤ –ë–î.
    –û—Ç–æ–∑–≤–∞—Ç—å refresh token –º–æ–∂–Ω–æ, –µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤ –ë–î –∏ —É–¥–∞–ª—è—Ç—å –ø—Ä–∏ –ª–æ–≥–∞—É—Ç–µ.
    –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å.
    """
    try:
        user_id = verify_access_token(credentials.credentials) # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º Access Token
        user = await db.get(User, user_id)
        if not user:
            raise HTTPException(status_code=404, detail="User not found.")

        user.status = UserAccountStatus.logged_out # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–≤—ã—à–µ–ª"
        await db.commit()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã (—Å—Ç–∞—Ç—É—Å –≤ –ë–î: logged_out).")
        return {"ok": True, "message": "Successfully logged out."}
    except HTTPException as e:
        raise e
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {e}")


# ================================================

# –î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram initData
@app.post("/api/verify-telegram-init")
async def verify_telegram_init(request: Request):
    """
    –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç Telegram initData –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
    –ù–ï –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–∞—à–µ–π –ë–î.
    """
    try:
        data = await request.json()
        init_data = data.get("initData")

        if not init_data:
            raise HTTPException(status_code=400, detail="Missing initData")

        if not check_webapp_signature(init_data, BOT_TOKEN):
            raise HTTPException(status_code=403, detail="Invalid Telegram initData signature.")

        user_data_tg_str = dict(parse_qsl(init_data)).get('user')
        if not user_data_tg_str:
            raise HTTPException(status_code=400, detail="Telegram user data not found in initData")

        user_info_tg = json.loads(user_data_tg_str)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return {
            "ok": True,
            "telegram_id": user_info_tg.get('id'),
            "message": "Telegram initData verified."
        }
    except HTTPException as e:
        raise e
    except Exception as e:
        print(f"Error verifying Telegram initData: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {e}")


# ================================================

# –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–∞—à–µ–π –ë–î –ø–æ Telegram ID
@app.post("/api/is-user-registered")
async def is_user_registered(request: Request, db: AsyncSession = Depends(get_async_session)):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –ø–æ Telegram ID.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ initData —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞.
    """
    try:
        data = await request.json()
        telegram_id = data.get("telegram_id") # –ü–æ–ª—É—á–∞–µ–º ID, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –±—ã–ª –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω

        if not telegram_id:
            raise HTTPException(status_code=400, detail="Missing Telegram ID.")

        user = await db.get(User, telegram_id)
        if user:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –°—Ç–∞—Ç—É—Å: {user.status.value}, –†–æ–ª—å: {user.role.value}")
            return {
                "ok": True,
                "isRegistered": True,
                "username": user.username,
                "status": user.status.value, # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ä–æ–ª—å
                "role": user.role.value
            }
        else:
            return {
                "ok": True,
                "isRegistered": False,
                "message": "User not registered in our system."
            }
    except HTTPException as e:
        raise e
    except Exception as e:
        print(f"Error checking user registration: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {e}")





# === –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ===
@app.post("/api/resend_email")
async def api_resend_email(request: Request):
    try:
        body = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Bad Request: Invalid JSON")

    init_data = body.get("telegramInitData")
    email = body.get("email")

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ init_data
    if not init_data:
        raise HTTPException(status_code=403, detail="Missing Telegram initData.")

    # 2. –ï—Å–ª–∏ init_data –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë –ø–æ–¥–ø–∏—Å—å
    if not check_webapp_signature(init_data, BOT_TOKEN):
        raise HTTPException(status_code=403, detail="Invalid Telegram initData signature.")

    print(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å—å–º–∞ –Ω–∞ {email}")
    if email:
        return {"ok": True, "message": "Email has been sent."}
    else:
        raise HTTPException(status_code=400, detail="Email is required.")

# === –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram ===
# –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
@app.post("/webhook")
async def telegram_webhook(request: Request):
    update = types.Update.model_validate(await request.json(), context={"bot": bot})
    await dp.feed_update(bot, update)
    return {"ok": True}


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –Ω–∞ —Å—Ç–∞—Ä—Ç–µ FastAPI ===
@app.on_event("startup")
async def on_startup():
    print("üöÄ FastAPI —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª.")
    try:
        if DROP_DB_ON_STARTUP:
            print("‚ùó –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DROP_DB_ON_STARTUP=True. –£–¥–∞–ª—è—é –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã...")
            await drop_db_tables()
            print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")

        print("–°–æ–∑–¥–∞—é/–ø—Ä–æ–≤–µ—Ä—è—é —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await create_db_tables()
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ ---
    if not BOT_TOKEN or not BASE_WEBHOOK_URL:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN –∏–ª–∏ BASE_WEBHOOK_URL. –í–µ–±—Ö—É–∫–∏ –Ω–µ –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        # –í–æ–∑–º–æ–∂–Ω–æ, –∑–¥–µ—Å—å —Å—Ç–æ–∏—Ç –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        return

    webhook_url = f"{BASE_WEBHOOK_URL}/webhook"
    print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫ –Ω–∞: {webhook_url}")
    try:
        await bot(SetWebhook(url=webhook_url))
        print("‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        # –ï—Å–ª–∏ –≤–µ–±—Ö—É–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –±–æ—Ç–∞
        # –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ—à–∏—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ –∑–¥–µ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        raise

    print("Aiogram –≤–µ–±—Ö—É–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ –æ–∂–∏–¥–∞—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.")


# === –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã FastAPI ===
@app.on_event("shutdown")
async def on_shutdown():
    print("FastAPI –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
    # –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º.
    print("–£–¥–∞–ª—è—é –≤–µ–±—Ö—É–∫...")
    try:
        await bot(DeleteWebhook())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")

    await bot.session.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤  ===
app.include_router(investments.router)
app.include_router(referrals.router)
app.include_router(transactions_router)
app.include_router(games.router)