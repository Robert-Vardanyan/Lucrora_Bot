# Assuming this is your main FastAPI file
import asyncio
import hmac
import hashlib
import os
from urllib.parse import parse_qsl
from operator import itemgetter
import json

from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.methods import SetWebhook, DeleteWebhook # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤

from fastapi import FastAPI, Request, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError

from dotenv import load_dotenv
from passlib.context import CryptContext

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ ORM-–º–æ–¥–µ–ª–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã –ë–î ---
from app.database import engine, create_db_tables, drop_db_tables, get_async_session
from app.models import User, Investment, Transaction, Referral # Ensure User is imported

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π ---
from app.routers import investments # 

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ initData ---
from app.utils import check_webapp_signature 

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É ---
from app import referrals

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ---
from app.transactions import router as transactions_router


# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL") # URL –≤–∞—à–µ–≥–æ Mini App
BASE_WEBHOOK_URL = os.getenv("BASE_WEBHOOK_URL") 
DROP_DB_ON_STARTUP = os.getenv("DROP_DB_ON_STARTUP", "False").lower() == "true"


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI ===
app = FastAPI()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π ===
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# CORS –¥–ª—è Mini App
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://lucrora.vercel.app", "https://lucrora-bot.onrender.com", "http://localhost:8000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞ ===
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === –ö–Ω–æ–ø–∫–∞ Mini App ===
webapp_button = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Mini App", web_app=WebAppInfo(url=WEBAPP_URL))]
])

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ===
@dp.message(Command("start"))
async def start_handler(message: Message):

    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id} - start")
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Mini App:",
        reply_markup=webapp_button
    )
    await message.delete() # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# === –≠–Ω–¥–ø–æ–∏–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Mini App ===
@app.post("/api/init")
async def api_init(request: Request, db: AsyncSession = Depends(get_async_session)):
    # print("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Mini App.")
    try:
        body = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Bad Request: Invalid JSON")

    # print(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {body}")
    init_data = body.get("initData")
    # print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {init_data}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ init_data
    if not init_data:
        raise HTTPException(status_code=403, detail="Missing Telegram initData")

    # –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –º—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ init_data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë –ø–æ–¥–ø–∏—Å—å
    if not check_webapp_signature(init_data, BOT_TOKEN):
        raise HTTPException(status_code=403, detail="Invalid Telegram initData signature.")


    # print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ initData (–µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞) –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
    user_data_str = dict(parse_qsl(init_data)).get('user')
    # print(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data_str}")

    if not user_data_str:
        raise HTTPException(status_code=400, detail="User data not found in initData")

    try:
        user_info = json.loads(user_data_str)
        telegram_id = int(user_info.get('id'))
        first_name = user_info.get('first_name', '')
        last_name = user_info.get('last_name', '')
        username_tg = user_info.get('username', '')
    except (json.JSONDecodeError, ValueError):
        raise HTTPException(status_code=400, detail="Invalid user data JSON or Telegram ID in initData")

    # print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} {last_name} (ID: {telegram_id}, Username: {username_tg})")
    # print("–ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    # print(f"–ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID: {type(telegram_id)} - {telegram_id} ")
    user = await db.get(User, telegram_id)
    # print(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {type(user)} {user}")

    if user:
        # print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        # # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º Mini App
        # print(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
        # print(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: main_balance={user.main_balance}, bonus_balance={user.bonus_balance}, lucrum_balance={user.lucrum_balance}")
        # print(f"–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {user.total_invested}, –í—ã–≤–µ–¥–µ–Ω–æ: {user.total_withdrawn}")
        # print(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}, –ò–º—è: {user.first_name}")
        # print(f"–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.last_name}")
        # print(f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.registration_date}")
        return {
            "ok": True,
            "isRegistered": True,
            "main_balance": float(user.main_balance),
            "bonus_balance": float(user.bonus_balance),
            "lucrum_balance": float(user.lucrum_balance),
            "total_invested": float(user.total_invested),
            "total_withdrawn": float(user.total_withdrawn),
            "username": user.username,
            "first_name": user.first_name,
            # Ensure registration_date is sent as a string (e.g., ISO format)
            "registration_date": user.registration_date.isoformat() if user.registration_date else None
        }
    else:
        # print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} (ID: {telegram_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return {
            "ok": True,
            "isRegistered": False,
            "main_balance": 0.0,
            "bonus_balance": 0.0,
            "lucrum_balance": 0.0,
            "total_invested": 0.0,
            "total_withdrawn": 0.0,
            "username": username_tg or first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "first_name": first_name,
            "registration_date": None # No registration date if not registered
        }

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
@app.post("/api/register")
async def api_register(request: Request, db: AsyncSession = Depends(get_async_session)):
    try:
        body = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Bad Request: Invalid JSON")

    init_data = body.get("telegramInitData")
    username = body.get("username")
    password = body.get("password")
    referral_code = body.get("referralCode")

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ init_data
    if not init_data:
        raise HTTPException(status_code=403, detail="Missing Telegram initData.")

    # 2. –ï—Å–ª–∏ init_data –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë –ø–æ–¥–ø–∏—Å—å
    if not check_webapp_signature(init_data, BOT_TOKEN):
        raise HTTPException(status_code=403, detail="Invalid Telegram initData signature.")


    if not username or not password:
        raise HTTPException(status_code=400, detail="Username and password are required")

    user_data_str = dict(parse_qsl(init_data)).get('user')
    if not user_data_str:
        raise HTTPException(status_code=400, detail="User data not found in initData")

    try:
        user_info = json.loads(user_data_str)
        telegram_id = int(user_info.get('id'))
        first_name = user_info.get('first_name', '')
        last_name = user_info.get('last_name', '')
    except (json.JSONDecodeError, ValueError):
        raise HTTPException(status_code=400, detail="Invalid user data JSON or Telegram ID in initData")

    try:
        existing_user_by_id = await db.get(User, telegram_id)
        if existing_user_by_id:
            raise HTTPException(status_code=409, detail="User already registered with this Telegram ID")

        stmt_check_username = select(User).where(User.username == username)
        existing_user_by_username = (await db.execute(stmt_check_username)).scalar_one_or_none()
        if existing_user_by_username:
            raise HTTPException(status_code=409, detail="Username already taken")

        hashed_password_bcrypt = pwd_context.hash(password)

        new_user = User(
            id=telegram_id,
            username=username,
            first_name=first_name,
            last_name=last_name,
            password_hash=hashed_password_bcrypt
        )
        db.add(new_user)
        await db.commit()
        await db.refresh(new_user)

        if referral_code:
            stmt_referrer = select(User).where(User.username == referral_code)
            referrer = (await db.execute(stmt_referrer)).scalar_one_or_none()
            if referrer:
                new_referral = Referral(
                    referrer_id=referrer.id,
                    referred_id=new_user.id,
                    referral_level=1
                )
                db.add(new_referral)
                await db.commit()
                print(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å: {referrer.username} (ID: {referrer.id}) –ø—Ä–∏–≥–ª–∞—Å–∏–ª {new_user.username} (ID: {new_user.id})")
            else:
                print(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ '{referral_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {telegram_id}) —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ë–î.")

        return {
            "ok": True,
            "message": "Registration successful!",
            "user_id": str(telegram_id),
            "username": username
        }
    except IntegrityError as e:
        await db.rollback()
        print(f"–û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        if "users_username_key" in str(e):
            raise HTTPException(status_code=409, detail="Username already taken.")
        raise HTTPException(status_code=500, detail=f"Database integrity error during registration: {e}")
    except Exception as e:
        await db.rollback()
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        raise HTTPException(status_code=500, detail=f"Database error during registration: {e}")

# === –≠–ù–î–ü–û–ò–ù–¢: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
@app.post("/api/login")
async def api_login(request: Request, db: AsyncSession = Depends(get_async_session)):
    try:
        body = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Bad Request: Invalid JSON")

    init_data = body.get("telegramInitData")
    username = body.get("username")
    password = body.get("password")

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ init_data
    if not init_data:
        raise HTTPException(status_code=403, detail="Missing Telegram initData.")

    # 2. –ï—Å–ª–∏ init_data –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë –ø–æ–¥–ø–∏—Å—å
    if not check_webapp_signature(init_data, BOT_TOKEN):
        raise HTTPException(status_code=403, detail="Invalid Telegram initData signature.")

    if not username or not password:
        raise HTTPException(status_code=400, detail="Username and password are required")

    user_data_str = dict(parse_qsl(init_data)).get('user')
    if not user_data_str:
        raise HTTPException(status_code=400, detail="User data not found in initData")

    try:
        user_info = json.loads(user_data_str)
        telegram_id = int(user_info.get('id'))
    except (json.JSONDecodeError, ValueError):
        raise HTTPException(status_code=400, detail="Invalid user data JSON or Telegram ID in initData")

    stmt_user = select(User).where(User.username == username)
    user = (await db.execute(stmt_user)).scalar_one_or_none()

    if not user:
        raise HTTPException(status_code=401, detail="Invalid username or password.")

    if not pwd_context.verify(password, user.password_hash):
        raise HTTPException(status_code=401, detail="Invalid username or password.")

    if user.id != telegram_id:
        raise HTTPException(status_code=403, detail="Account not linked to this Telegram ID. Please re-register or contact support.")

    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {telegram_id}) —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É.")

    return {
        "ok": True,
        "message": "Login successful!",
        "isRegistered": True,
        "main_balance": float(user.main_balance),
        "bonus_balance": float(user.bonus_balance),
        "lucrum_balance": float(user.lucrum_balance),
        "total_invested": float(user.total_invested),
        "total_withdrawn": float(user.total_withdrawn),
        "username": user.username,
        "first_name": user.first_name,
        "registration_date": user.registration_date.isoformat() if user.registration_date else None
    }

# === –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ===
@app.post("/api/resend_email")
async def api_resend_email(request: Request):
    try:
        body = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Bad Request: Invalid JSON")

    init_data = body.get("telegramInitData")
    email = body.get("email")

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ init_data
    if not init_data:
        raise HTTPException(status_code=403, detail="Missing Telegram initData.")

    # 2. –ï—Å–ª–∏ init_data –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë –ø–æ–¥–ø–∏—Å—å
    if not check_webapp_signature(init_data, BOT_TOKEN):
        raise HTTPException(status_code=403, detail="Invalid Telegram initData signature.")

    print(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å—å–º–∞ –Ω–∞ {email}")
    if email:
        return {"ok": True, "message": "Email has been sent."}
    else:
        raise HTTPException(status_code=400, detail="Email is required.")

# === –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram ===
# –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
@app.post("/webhook")
async def telegram_webhook(request: Request):
    update = types.Update.model_validate(await request.json(), context={"bot": bot})
    await dp.feed_update(bot, update)
    return {"ok": True}


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –Ω–∞ —Å—Ç–∞—Ä—Ç–µ FastAPI ===
@app.on_event("startup")
async def on_startup():
    print("üöÄ FastAPI —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª.")
    try:
        if DROP_DB_ON_STARTUP:
            print("‚ùó –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DROP_DB_ON_STARTUP=True. –£–¥–∞–ª—è—é –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã...")
            await drop_db_tables()
            print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")

        print("–°–æ–∑–¥–∞—é/–ø—Ä–æ–≤–µ—Ä—è—é —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await create_db_tables()
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ ---
    if not BOT_TOKEN or not BASE_WEBHOOK_URL:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN –∏–ª–∏ BASE_WEBHOOK_URL. –í–µ–±—Ö—É–∫–∏ –Ω–µ –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        # –í–æ–∑–º–æ–∂–Ω–æ, –∑–¥–µ—Å—å —Å—Ç–æ–∏—Ç –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        return 

    webhook_url = f"{BASE_WEBHOOK_URL}/webhook"
    print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫ –Ω–∞: {webhook_url}")
    try:
        await bot(SetWebhook(url=webhook_url))
        print("‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        # –ï—Å–ª–∏ –≤–µ–±—Ö—É–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –±–æ—Ç–∞
        # –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ—à–∏—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ –∑–¥–µ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        raise

    print("Aiogram –≤–µ–±—Ö—É–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ –æ–∂–∏–¥–∞—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.")


# === –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã FastAPI ===
@app.on_event("shutdown")
async def on_shutdown():
    print("FastAPI –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
    # –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º.
    print("–£–¥–∞–ª—è—é –≤–µ–±—Ö—É–∫...")
    try:
        await bot(DeleteWebhook())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
    
    await bot.session.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤  ===
app.include_router(investments.router) 
app.include_router(referrals.router)  
app.include_router(transactions_router)