import asyncio
import hmac
import hashlib
import os
from urllib.parse import parse_qsl
from operator import itemgetter
import json # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º json –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ user –∏–∑ initData

from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from starlette.responses import JSONResponse
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI ===
app = FastAPI()

# CORS –¥–ª—è Mini App
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://lucrora.vercel.app", "https://lucrora-bot.onrender.com", "http://localhost:8000"], # –î–æ–±–∞–≤–∏–ª localhost –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞ ===
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === –ò–ú–ò–¢–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –í –ü–ê–ú–Ø–¢–ò ===
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—ã–ª–∞ –±—ã –Ω–∞—Å—Ç–æ—è—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (PostgreSQL, MongoDB, Firestore –∏ —Ç.–¥.)
# –ö–ª—é—á: Telegram User ID (str)
# –ó–Ω–∞—á–µ–Ω–∏–µ: dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username, main_balance, bonus_balance, lucrum_balance –∏ —Ç.–¥.)
user_db = {}
# –ü—Ä–∏–º–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
# user_db['123456789'] = {
#     "username": "testuser",
#     "main_balance": 100.50,
#     "bonus_balance": 25.00,
#     "lucrum_balance": 50.00,
#     "total_invested": 200.00,
#     "total_withdrawn": 50.00
# }

# === –ö–Ω–æ–ø–∫–∞ Mini App ===
webapp_button = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Mini App", web_app=WebAppInfo(url=WEBAPP_URL))]
])

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ===
@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Mini App:",
        reply_markup=webapp_button
    )
    await message.delete()

# === –ü–æ–¥–ø–∏—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Mini App ===
def check_webapp_signature(init_data: str, token: str) -> bool:
    try:
        parsed_data = dict(parse_qsl(init_data))
    except ValueError:
        return False
    if "hash" not in parsed_data:
        return False

    hash_ = parsed_data.pop('hash')
    data_check_string = "\n".join(f"{k}={v}" for k, v in sorted(parsed_data.items(), key=itemgetter(0)))
    secret_key = hmac.new(
        key=b"WebAppData", msg=token.encode(), digestmod=hashlib.sha256
    )
    calculated_hash = hmac.new(
        key=secret_key.digest(), msg=data_check_string.encode(), digestmod=hashlib.sha256
    ).hexdigest()
    return calculated_hash == hash_

# === –≠–Ω–¥–ø–æ–∏–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Mini App ===
@app.post("/api/init")
async def api_init(request: Request):
    try:
        body = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Bad Request: Invalid JSON")

    init_data = body.get("initData")
    if not init_data or not check_webapp_signature(init_data, BOT_TOKEN):
        raise HTTPException(status_code=403, detail="Invalid Telegram initData")

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ init_data ---
    user_data_str = dict(parse_qsl(init_data)).get('user')
    if not user_data_str:
        raise HTTPException(status_code=400, detail="User data not found in initData")

    try:
        user_info = json.loads(user_data_str)
        telegram_id = str(user_info.get('id'))
    except json.JSONDecodeError:
        raise HTTPException(status_code=400, detail="Invalid user data JSON in initData")

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ---
    if telegram_id in user_db:
        user_data = user_db[telegram_id]
        return JSONResponse({
            "ok": True,
            "isRegistered": True, # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            "main_balance": user_data.get("main_balance", 0.0),
            "bonus_balance": user_data.get("bonus_balance", 0.0),
            "lucrum_balance": user_data.get("lucrum_balance", 0.0),
            "total_invested": user_data.get("total_invested", 0.0),
            "total_withdrawn": user_data.get("total_withdrawn", 0.0),
            "username": user_data.get("username", "N/A") # –î–æ–±–∞–≤–∏–ª username, —á—Ç–æ–±—ã frontend –º–æ–≥ –µ–≥–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å
        })
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ isRegistered=False
        return JSONResponse({
            "ok": True,
            "isRegistered": False, # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            "main_balance": 0.0,
            "bonus_balance": 0.0,
            "lucrum_balance": 0.0,
            "total_invested": 0.0,
            "total_withdrawn": 0.0,
            "username": user_info.get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ Telegram –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        })

# === –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
@app.post("/api/register")
async def api_register(request: Request):
    try:
        body = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Bad Request: Invalid JSON")

    init_data = body.get("telegramInitData")
    username = body.get("username")
    password = body.get("password") # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª–∏ –ù–ï —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ!
    referral_code = body.get("referralCode")

    if not init_data or not check_webapp_signature(init_data, BOT_TOKEN):
        raise HTTPException(status_code=403, detail="Invalid Telegram initData")

    if not username or not password:
        raise HTTPException(status_code=400, detail="Username and password are required")

    user_data_str = dict(parse_qsl(init_data)).get('user')
    if not user_data_str:
        raise HTTPException(status_code=400, detail="User data not found in initData")

    try:
        user_info = json.loads(user_data_str)
        telegram_id = str(user_info.get('id'))
    except json.JSONDecodeError:
        raise HTTPException(status_code=400, detail="Invalid user data JSON in initData")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    if telegram_id in user_db:
        raise HTTPException(status_code=409, detail="User already registered")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–æ –ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
    for uid, data in user_db.items():
        if data.get("username") == username:
            raise HTTPException(status_code=409, detail="Username already taken")

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ë–î ---
    user_db[telegram_id] = {
        "username": username,
        "password": password, # –û–ø—è—Ç—å –∂–µ, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ç–∞–∫ –Ω–µ –¥–µ–ª–∞—é—Ç!
        "referral_code": referral_code,
        "main_balance": 0.0,
        "bonus_balance": 0.0,
        "lucrum_balance": 0.0,
        "total_invested": 0.0,
        "total_withdrawn": 0.0,
        "registration_date": "01.01.2025" # –ó–∞–≥–ª—É—à–∫–∞
    }
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {telegram_id}) —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

    return JSONResponse({
        "ok": True,
        "message": "Registration successful!",
        "user_id": telegram_id,
        "username": username
    })


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ FastAPI ===
@app.on_event("startup")
async def on_startup():
    print("üöÄ FastAPI —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª. –ó–∞–ø—É—Å–∫–∞–µ–º aiogram polling...")
    asyncio.create_task(start_bot())

# === –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ polling ===
async def start_bot():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        print("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", e)